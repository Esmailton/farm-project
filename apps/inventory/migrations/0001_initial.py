# Generated by Django 5.0.1 on 2024-02-19 02:03

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('farm', '0006_alter_department_department_alter_farm_latitude_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.CharField(max_length=100, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ColumnSpace',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('column', models.CharField(max_length=150, verbose_name='Column')),
            ],
            options={
                'verbose_name': 'Column Space',
                'verbose_name_plural': 'Column Spaces',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=150, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LineSpace',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('line', models.CharField(max_length=150, verbose_name='Line')),
            ],
            options={
                'verbose_name': 'Line Space',
                'verbose_name_plural': 'Line Spaces',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MeasureType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True)),
                ('acronym', models.CharField(max_length=4, verbose_name='acronym')),
                ('measure_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Measure Type')),
            ],
            options={
                'verbose_name': 'Measure Type',
                'verbose_name_plural': 'Measures Types',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='img/thumb/%Y/%m/%d', verbose_name='Picture')),
                ('bar_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Bar Code')),
                ('qr_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Qr Code')),
                ('internal_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Internal Code')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductInvetory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantity')),
                ('reorder_point', models.PositiveIntegerField(default=10, verbose_name='Reorder Point')),
            ],
            options={
                'verbose_name': 'Product Invetory',
                'verbose_name_plural': 'Products Invetory',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Shelf',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=150, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Shelf',
                'verbose_name_plural': 'Shelfies',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Street',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=150, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Street',
                'verbose_name_plural': 'Streets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(models.F('name'), name='unique_name_category'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='farm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farm_invetory', to='farm.farm'),
        ),
        migrations.AddConstraint(
            model_name='measuretype',
            constraint=models.UniqueConstraint(models.F('name'), models.F('acronym'), name='unique_name_acronym_measure_type'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_category', to='inventory.category'),
        ),
        migrations.AddField(
            model_name='product',
            name='measuretype',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_measure', to='inventory.measuretype'),
        ),
        migrations.AddField(
            model_name='productinvetory',
            name='column_space',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_column_space', to='inventory.columnspace'),
        ),
        migrations.AddField(
            model_name='productinvetory',
            name='line_space',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_line_space', to='inventory.linespace'),
        ),
        migrations.AddField(
            model_name='productinvetory',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_invetory', to='inventory.product'),
        ),
        migrations.AddField(
            model_name='productinvetory',
            name='shelf',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_shelf', to='inventory.shelf'),
        ),
        migrations.AddField(
            model_name='linespace',
            name='shelf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_spaces', to='inventory.shelf'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='street',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streets', to='inventory.shelf'),
        ),
        migrations.AddField(
            model_name='columnspace',
            name='shelf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='column_spaces', to='inventory.shelf'),
        ),
        migrations.AddField(
            model_name='shelf',
            name='street',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='street', to='inventory.street'),
        ),
        migrations.AddField(
            model_name='productinvetory',
            name='street',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_street', to='inventory.street'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.UniqueConstraint(models.F('name'), models.F('category'), name='unique_product_category_name'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(check=models.Q(('price__gte', 0)), name='positive_price_constraint_product'),
        ),
        migrations.AddConstraint(
            model_name='linespace',
            constraint=models.UniqueConstraint(models.F('line'), models.F('shelf'), name='unique_shelf_line'),
        ),
        migrations.AddConstraint(
            model_name='inventory',
            constraint=models.UniqueConstraint(models.F('name'), name='unique_farm_name'),
        ),
        migrations.AddConstraint(
            model_name='columnspace',
            constraint=models.UniqueConstraint(models.F('column'), models.F('shelf'), name='unique_shelf_column'),
        ),
        migrations.AddConstraint(
            model_name='shelf',
            constraint=models.UniqueConstraint(models.F('name'), models.F('street'), name='unique_name_street'),
        ),
        migrations.AddConstraint(
            model_name='productinvetory',
            constraint=models.UniqueConstraint(models.F('product'), models.F('street'), models.F('shelf'), models.F('line_space'), models.F('column_space'), name='unique_product_location_constraint'),
        ),
        migrations.AddConstraint(
            model_name='productinvetory',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 0)), name='positive_quantity_constraint_product'),
        ),
    ]
